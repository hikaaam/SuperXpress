export const generateGraphqlRouter = (name) => {
return `//generated by cli
import { Resolver, Query, Arg, FieldResolver, Root, Authorized } from 'type-graphql'
import { ${name} } from '../../../Entity/${name}'
import { Like } from "typeorm";
import { Paginate } from '../../../Vendor';

@Resolver(of => ${name})
class ${name}Resolver {

  @Authorized()
  @Query(() => [${name}])
  async ${name}s(): Promise<${name}[]> {
    return await ${name}.find();
  }

  @Authorized()
  @Query(() => ${name})
  async ${name}(@Arg('id') id: number): Promise<${name}> {
    return await ${name}.findOne(id);
  }

  @Authorized()
  @Query(() => [${name}])
  async ${name}Paginate(@Arg('page') page: number, @Arg('get') get: number): Promise<unknown> {
    return (await Paginate({
      get, page, entity: ${name},
    })).data;
  }

  @Authorized()
  @Query(() => [${name}])
  async ${name}Search(@Arg('name') name: string): Promise<${name}[]> {
    return await ${name}.find({
      where: {
        name: Like(\`% \$\{ name }% \`)
      }
    })
  }

}

export default ${name}Resolver;`;
}